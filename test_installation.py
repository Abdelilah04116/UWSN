### Fichier: test_installation.py

"""
Script de test pour v√©rifier l'installation et les d√©pendances
"""

import sys
import importlib
import traceback

def test_import(module_name, package_name=None):
    """Test l'import d'un module"""
    try:
        if package_name:
            module = importlib.import_module(module_name, package_name)
        else:
            module = importlib.import_module(module_name)
        print(f"‚úÖ {module_name}: {module.__version__ if hasattr(module, '__version__') else 'OK'}")
        return True
    except ImportError as e:
        print(f"‚ùå {module_name}: {e}")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è {module_name}: {e}")
        return False

def test_project_modules():
    """Test les modules du projet"""
    print("\nüîç Test des modules du projet...")
    
    modules = [
        'src.utils_network',
        'src.env_gym',
        'src.ppo_train'
    ]
    
    success = True
    for module in modules:
        try:
            importlib.import_module(module)
            print(f"‚úÖ {module}: OK")
        except Exception as e:
            print(f"‚ùå {module}: {e}")
            success = False
    
    return success

def main():
    """Fonction principale de test"""
    print("üß™ Test d'installation UWSN PPO")
    print("=" * 50)
    
    # Test des d√©pendances principales
    print("\nüì¶ Test des d√©pendances principales...")
    
    dependencies = [
        ('numpy', 'numpy'),
        ('torch', 'torch'),
        ('gym', 'gym'),
        ('stable_baselines3', 'stable_baselines3'),
        ('matplotlib', 'matplotlib'),
        ('plotly', 'plotly'),
        ('pandas', 'pandas'),
        ('scipy', 'scipy'),
        ('seaborn', 'seaborn'),
        ('streamlit', 'streamlit')
    ]
    
    success_count = 0
    for display_name, module_name in dependencies:
        if test_import(module_name):
            success_count += 1
    
    print(f"\nüìä D√©pendances: {success_count}/{len(dependencies)} install√©es")
    
    # Test des modules du projet
    project_success = test_project_modules()
    
    # Test de l'environnement
    print("\nüåä Test de l'environnement...")
    try:
        from src.utils_network import create_sample_network, AcousticPropagation, EnergyModel
        from src.env_gym import UWSNRoutingEnv
        
        # Cr√©er un petit r√©seau de test
        nodes = create_sample_network(num_nodes=5, area_size=200.0)
        print(f"‚úÖ Cr√©ation r√©seau: {len(nodes)} n≈ìuds")
        
        # Test des mod√®les physiques
        acoustic = AcousticPropagation()
        energy_model = EnergyModel()
        print("‚úÖ Mod√®les physiques: OK")
        
        # Test de l'environnement
        env = UWSNRoutingEnv(nodes=nodes, max_steps=10)
        obs = env.reset()
        print(f"‚úÖ Environnement Gym: {env.observation_space.shape}")
        
        # Test d'une action
        action = env.action_space.sample()
        obs, reward, done, info = env.step(action)
        print(f"‚úÖ Simulation: R√©compense {reward:.2f}")
        
    except Exception as e:
        print(f"‚ùå Test environnement: {e}")
        traceback.print_exc()
        project_success = False
    
    # R√©sum√©
    print("\n" + "=" * 50)
    if success_count == len(dependencies) and project_success:
        print("üéâ Installation r√©ussie! Le projet est pr√™t √† √™tre utilis√©.")
        print("\nüìù Prochaines √©tapes:")
        print("   1. python demo.py - D√©monstration rapide")
        print("   2. streamlit run app/streamlit_app.py - Interface web")
        print("   3. python src/ppo_train.py - Entra√Ænement PPO")
    else:
        print("‚ö†Ô∏è Installation incompl√®te. Veuillez installer les d√©pendances manquantes.")
        print("\nüîß Commandes utiles:")
        print("   pip install -r requirements.txt")
        print("   pip install --upgrade stable-baselines3")
    
    return success_count == len(dependencies) and project_success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
